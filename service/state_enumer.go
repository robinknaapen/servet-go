// Code generated by "enumer -type State -json -sql -linecomment"; DO NOT EDIT.

//
package service

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _StateName = "deadexitedwaitingrunningfailed"

var _StateIndex = [...]uint8{0, 4, 10, 17, 24, 30}

func (i State) String() string {
	if i >= State(len(_StateIndex)-1) {
		return fmt.Sprintf("State(%d)", i)
	}
	return _StateName[_StateIndex[i]:_StateIndex[i+1]]
}

var _StateValues = []State{0, 1, 2, 3, 4}

var _StateNameToValueMap = map[string]State{
	_StateName[0:4]:   0,
	_StateName[4:10]:  1,
	_StateName[10:17]: 2,
	_StateName[17:24]: 3,
	_StateName[24:30]: 4,
}

// StateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StateString(s string) (State, error) {
	if val, ok := _StateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to State values", s)
}

// StateValues returns all values of the enum
func StateValues() []State {
	return _StateValues
}

// IsAState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i State) IsAState() bool {
	for _, v := range _StateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for State
func (i State) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for State
func (i *State) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("State should be a string, got %s", data)
	}

	var err error
	*i, err = StateString(s)
	return err
}

func (i State) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *State) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := StateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
